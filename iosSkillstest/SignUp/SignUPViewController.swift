//
//  SignUPViewController.swift
//  iosSkillstest
//
//  Created by Everton Miranda Vitório on 21/09/18.
//  Copyright (c) 2018 Everton Miranda Vitório. All rights reserved.
//
//  This file was generated by the Clean Swift HELM Xcode Templates
//  https://github.com/HelmMobile/clean-swift-templates

import UIKit
import SkyFloatingLabelTextField

protocol SignUPViewControllerInput {
    func displaySucess(viewModel: SignUPScene.SignUP.ViewModel)
    func displayFailure(viewModel: SignUPScene.SignUP.ViewModel)
}

protocol SignUPViewControllerOutput {
    func singUPUser(request: SignUPScene.SignUP.Request)
}

class SignUPViewController: UIViewController, SignUPViewControllerInput {

    // MARK: Propeties

    var output: SignUPViewControllerOutput?
    var router: SignUPRouter?
    var user: User?

    // MARK: Outlets

    @IBOutlet weak var emailTextField: SkyFloatingLabelTextField!
    @IBOutlet weak var nameTextField: SkyFloatingLabelTextField!
    @IBOutlet weak var passwordTextField: SkyFloatingLabelTextField!

    // MARK: Object lifecycle

    override func awakeFromNib() {
        super.awakeFromNib()
        SignUPConfigurator.sharedInstance.configure(viewController: self)
    }

    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
    }
    
    // MARK: Requests
    
    func signUPUser() {
        let email = clearText(from: emailTextField, and: "O email não pode ser vazio.")
        guard email.isValidEmail() else {
            return
        }
        let password = clearText(from: passwordTextField, and: "A senha não pode ser vazia.")
        let name = clearText(from: nameTextField, and: "O nome não pode ser vazio.")
        let request = SignUPScene.SignUP.Request(email: email, password: password, name: name)
        output?.singUPUser(request: request)
    }

    // MARK: Display logic
    
    func displaySucess(viewModel: SignUPScene.SignUP.ViewModel) {
        displaySuccessfuAlert(with: viewModel.message)
    }
    
    func displayFailure(viewModel: SignUPScene.SignUP.ViewModel) {
        displayErrorAlert(with: viewModel.message)
    }
}

extension SignUPViewController {

    @IBAction func saveUser(_ sender: Any) {
        signUPUser()
    }
}



//This should be on configurator but for some reason storyboard doesn't detect ViewController's name if placed there
extension SignUPViewController: SignUPPresenterOutput {
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        router?.passDataToNextScene(for: segue)
    }
}
