//
//  SignUPViewController.swift
//  iosSkillstest
//
//  Created by Everton Miranda Vitório on 21/09/18.
//  Copyright (c) 2018 Everton Miranda Vitório. All rights reserved.
//
//  This file was generated by the Clean Swift HELM Xcode Templates
//  https://github.com/HelmMobile/clean-swift-templates

import UIKit
import SkyFloatingLabelTextField
import SVProgressHUD

protocol SignUPViewControllerInput {
    func displaySucess(viewModel: SignUPScene.SignUP.ViewModel)
    func displayFailure(viewModel: SignUPScene.SignUP.ViewModel)
    func displayEditValues(viewModel: SignUPScene.EditValue.ViewModel)
}

protocol SignUPViewControllerOutput {
    func singUPUser(request: SignUPScene.SignUP.Request)
    func editValues(request: SignUPScene.EditValue.Request)
}

class SignUPViewController: UIViewController, SignUPViewControllerInput {

    // MARK: Propeties

    var output: SignUPViewControllerOutput?
    var router: SignUPRouter?

    // MARK: Outlets

    @IBOutlet weak var emailTextField: SkyFloatingLabelTextField!
    @IBOutlet weak var nameTextField: SkyFloatingLabelTextField!
    @IBOutlet weak var passwordTextField: SkyFloatingLabelTextField!
    @IBOutlet weak var saveButton: UIButton!

    // MARK: Object lifecycle

    override func awakeFromNib() {
        super.awakeFromNib()
        SignUPConfigurator.sharedInstance.configure(viewController: self)
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        let tap: UITapGestureRecognizer = UITapGestureRecognizer(target: self, action: #selector(dismissKeyboard))
        view.addGestureRecognizer(tap)
    }

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        editValue()
    }

    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        emailTextField.isUserInteractionEnabled = true
        emailTextField.text = ""
        nameTextField.text = ""
        passwordTextField.text = ""
    }

    @objc func dismissKeyboard() {
        view.endEditing(true)
    }

    // MARK: Requests

    func signUPUser() {
        let email = clearText(from: emailTextField, and: "O email não pode ser vazio.")
        guard email.isValidEmail() else {
            return
        }
        let password = clearText(from: passwordTextField, and: "A senha não pode ser vazia.")
        let name = clearText(from: nameTextField, and: "O nome não pode ser vazio.")
        let request = SignUPScene.SignUP.Request(email: email, password: password, name: name)
        SVProgressHUD.show()
        output?.singUPUser(request: request)
    }

    func editValue() {
        let request = SignUPScene.EditValue.Request()
        output?.editValues(request: request)
    }

    // MARK: Display logic

    func displaySucess(viewModel: SignUPScene.SignUP.ViewModel) {
        SVProgressHUD.dismiss()
        displaySuccessfuAlert(with: viewModel.message)
        navigationController?.popViewController(animated: true)
    }

    func displayFailure(viewModel: SignUPScene.SignUP.ViewModel) {
        SVProgressHUD.dismiss()
        displayErrorAlert(with: viewModel.message)
    }

    func displayEditValues(viewModel: SignUPScene.EditValue.ViewModel) {
        emailTextField.isUserInteractionEnabled = false
        let user = viewModel.user
        emailTextField.text = user.email
        nameTextField.text = user.name
        passwordTextField.text = user.password
    }
}

extension SignUPViewController: UITextFieldDelegate {

    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        switch textField {
        case emailTextField:
            nameTextField.becomeFirstResponder()
        case nameTextField:
            passwordTextField.becomeFirstResponder()
        case passwordTextField:
            passwordTextField.resignFirstResponder()
            saveButton.sendActions(for: .touchUpInside)
        default:
            passwordTextField.resignFirstResponder()
        }
        return false
    }
}

// MARK: IBActions

extension SignUPViewController {

    @IBAction func saveUser(_ sender: Any) {
        signUPUser()
    }
}

//This should be on configurator but for some reason storyboard doesn't detect ViewController's name if placed there
extension SignUPViewController: SignUPPresenterOutput {
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        router?.passDataToNextScene(for: segue)
    }
}
